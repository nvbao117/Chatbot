import { useState, useRef, useEffect } from "react"
import { ChatHistoryPanel } from "../../components/chatbot/ChatHistoryPanel"
import styles from "./ChatPage.module.css"

export const ChatPage = () => {
  // Load chat history from localStorage
  const loadChatHistory = () => {
    const saved = localStorage.getItem('chatHistory')
    if (saved) {
      return JSON.parse(saved).map(msg => ({
        ...msg,
        timestamp: new Date(msg.timestamp)
      }))
    }
    return [
      {
        id: 1,
        text: "Xin ch√†o! T√¥i l√† AI Learning Assistant c·ªßa EduLearn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Gi·∫£i th√≠ch c√°c kh√°i ni·ªám kh√≥ hi·ªÉu\n‚Ä¢ Gi·∫£i b√†i t·∫≠p v√† b√†i ki·ªÉm tra\n‚Ä¢ ƒê∆∞a ra l·ªùi khuy√™n h·ªçc t·∫≠p\n‚Ä¢ T√¨m t√†i li·ªáu h·ªçc t·∫≠p ph√π h·ª£p\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ vi·ªác h·ªçc c·ªßa b·∫°n!",
        sender: "bot",
        timestamp: new Date()
      }
    ]
  }

  const [messages, setMessages] = useState(loadChatHistory)
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  // Save chat history to localStorage
  useEffect(() => {
    localStorage.setItem('chatHistory', JSON.stringify(messages))
  }, [messages])

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      const userMessage = {
        id: Date.now(),
        text: inputMessage,
        sender: "user",
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, userMessage])
      setInputMessage("")
      setIsTyping(true)

      // Simulate AI response
      setTimeout(() => {
        const responses = [
          "T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. H√£y ƒë·ªÉ t√¥i gi·∫£i th√≠ch chi ti·∫øt...",
          "ƒê√¢y l√† m·ªôt c√¢u h·ªèi r·∫•t hay! D·ª±a tr√™n ki·∫øn th·ª©c c·ªßa t√¥i...",
          "T√¥i s·∫Ω gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ v·∫•n ƒë·ªÅ n√†y...",
          "C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! ƒê√¢y l√† c√¢u tr·∫£ l·ªùi chi ti·∫øt...",
          "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√¢u h·ªèi n√†y. H√£y xem..."
        ]
        
        const botMessage = {
          id: Date.now() + 1,
          text: responses[Math.floor(Math.random() * responses.length)] + "\n\n" + 
                "ƒê√¢y l√† m·ªôt c√¢u tr·∫£ l·ªùi m·∫´u. Trong th·ª±c t·∫ø, t√¥i s·∫Ω ph√¢n t√≠ch c√¢u h·ªèi c·ªßa b·∫°n v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi chi ti·∫øt, ch√≠nh x√°c d·ª±a tr√™n ki·∫øn th·ª©c h·ªçc t·∫≠p.",
          sender: "bot",
          timestamp: new Date()
        }
        
        setMessages(prev => [...prev, botMessage])
        setIsTyping(false)
      }, 2000)
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const suggestions = [
    "Gi·∫£i th√≠ch kh√°i ni·ªám quang h·ª£p",
    "C√°ch gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c 2", 
    "L·ªãch s·ª≠ Vi·ªát Nam th·∫ø k·ª∑ 20",
    "C√¥ng th·ª©c t√≠nh di·ªán t√≠ch h√¨nh tr√≤n",
    "C√°ch vi·∫øt b√†i lu·∫≠n ti·∫øng Anh",
    "C√°ch h·ªçc t·ª´ v·ª±ng hi·ªáu qu·∫£"
  ]

  const quickActions = [
    { icon: "üßÆ", text: "To√°n h·ªçc", color: "#667eea" },
    { icon: "üî¨", text: "Khoa h·ªçc", color: "#764ba2" },
    { icon: "üìö", text: "VƒÉn h·ªçc", color: "#f093fb" },
    { icon: "üåç", text: "L·ªãch s·ª≠", color: "#4ecdc4" }
  ]

  return (
    <div className={styles.chatPage}>
      {/* Header */}
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <h1 className={styles.title}>ü§ñ Learning Assistant</h1>
          <p className={styles.subtitle}>AI-powered study companion ‚Ä¢ Always ready to help</p>
        </div>
        <div className={styles.headerActions}>
          <button className={styles.newChatBtn} onClick={() => {
            localStorage.removeItem('chatHistory')
            window.location.reload()
          }}>
            ‚ú® New Chat
          </button>
        </div>
      </div>

      {/* Main Content Area */}
      <div className={styles.mainContent}>
        {/* Chat History Sidebar */}
        <div className={styles.historySidebar}>
          <div className={styles.historyHeader}>
            <h3>üìã L·ªãch s·ª≠ chat</h3>
            <button 
              className={styles.clearHistoryBtn}
              onClick={() => {
                if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ chat?')) {
                  localStorage.removeItem('chatHistory')
                  setMessages([{
                    id: 1,
                    text: "Xin ch√†o! T√¥i l√† AI Learning Assistant c·ªßa EduLearn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Gi·∫£i th√≠ch c√°c kh√°i ni·ªám kh√≥ hi·ªÉu\n‚Ä¢ Gi·∫£i b√†i t·∫≠p v√† b√†i ki·ªÉm tra\n‚Ä¢ ƒê∆∞a ra l·ªùi khuy√™n h·ªçc t·∫≠p\n‚Ä¢ T√¨m t√†i li·ªáu h·ªçc t·∫≠p ph√π h·ª£p\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ vi·ªác h·ªçc c·ªßa b·∫°n!",
                    sender: "bot",
                    timestamp: new Date()
                  }])
                }
              }}
              title="X√≥a l·ªãch s·ª≠"
            >
              üóëÔ∏è
            </button>
          </div>
          
          <div className={styles.historyList}>
            {messages.length > 1 ? (
              <div className={styles.historyItem}>
                <div className={styles.historyContent}>
                  <div className={styles.historyTitle}>
                    Cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
                  </div>
                  <div className={styles.historyPreview}>
                    {messages[messages.length - 1]?.text || messages[messages.length - 1]?.content || 'Tin nh·∫Øn cu·ªëi'}
                  </div>
                  <div className={styles.historyDate}>
                    {messages[0]?.timestamp ? new Date(messages[0].timestamp).toLocaleDateString('vi-VN') : 'H√¥m nay'}
                  </div>
                </div>
                <div className={styles.messageCount}>
                  {messages.length} tin nh·∫Øn
                </div>
              </div>
            ) : (
              <div className={styles.emptyHistory}>
                <div className={styles.emptyIcon}>üí¨</div>
                <p>Ch∆∞a c√≥ l·ªãch s·ª≠ chat</p>
                <small>B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ xem l·ªãch s·ª≠ ·ªü ƒë√¢y</small>
              </div>
            )}
          </div>

               {/* Quick Actions */}
               <div className={styles.quickActions}>
                 <h4>Ch·ªß ƒë·ªÅ nhanh</h4>
                 <div className={styles.quickActionGrid}>
                   {quickActions.map((action, index) => (
                     <button
                       key={index}
                       className={styles.quickActionButton}
                       style={{ '--action-color': action.color }}
                       onClick={() => setInputMessage(`H√£y gi√∫p t√¥i h·ªçc v·ªÅ ${action.text}`)}
                     >
                       <span className={styles.actionIcon}>{action.icon}</span>
                       <span className={styles.actionText}>{action.text}</span>
                     </button>
                   ))}
                 </div>
                 
                 <h4>G·ª£i √Ω c√¢u h·ªèi</h4>
                 <div className={styles.quickSuggestions}>
                   {suggestions.slice(0, 3).map((suggestion, index) => (
                     <button
                       key={index}
                       className={styles.quickSuggestion}
                       onClick={() => setInputMessage(suggestion)}
                     >
                       {suggestion}
                     </button>
                   ))}
                 </div>
               </div>
        </div>

        {/* Chat Area */}
        <div className={styles.chatContainer}>
        {/* Messages */}
        <div className={styles.messagesContainer}>
          <div className={styles.messagesWrapper}>
            {messages.length === 1 && (
              <div className={styles.welcomeMessage}>
                <h2 style={{ margin: '0 0 1rem 0', fontSize: '1.5rem', color: '#333' }}>
                  üéì Ch√†o m·ª´ng ƒë·∫øn v·ªõi Learning Assistant!
                </h2>
                <p style={{ margin: '0', color: '#666', fontSize: '1rem' }}>
                  T√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£ h∆°n. H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán!
                </p>
              </div>
            )}
            
            {messages.map((message) => (
              <div
                key={message.id}
                className={`${styles.message} ${message.sender === 'user' ? styles.userMessage : styles.botMessage}`}
              >
                <div className={styles.messageContent}>
                  <div className={styles.messageText}>
                    {message.text.split('\n').map((line, index) => (
                      <p key={index} style={{ margin: line ? '0 0 8px 0' : '0' }}>
                        {line}
                      </p>
                    ))}
                  </div>
                  <div className={styles.messageTime}>
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className={`${styles.message} ${styles.botMessage}`}>
                <div className={styles.messageContent}>
                  <div className={styles.typingIndicator}>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
          </div>
          <div ref={messagesEndRef} />
        </div>

        {/* Suggestions */}
        {messages.length === 1 && !isTyping && (
          <div className={styles.suggestions}>
            <h3>G·ª£i √Ω c√¢u h·ªèi:</h3>
            <div className={styles.suggestionGrid}>
              {suggestions.map((suggestion, index) => (
                <button
                  key={index}
                  className={styles.suggestionCard}
                  onClick={() => setInputMessage(suggestion)}
                >
                  {suggestion}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className={styles.inputContainer}>
          <div className={styles.inputWrapper}>
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ h·ªçc t·∫≠p..."
              className={styles.textInput}
              rows={1}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className={styles.sendButton}
            >
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 9L11 13" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>
          <div className={styles.inputFooter}>
            <p>AI c√≥ th·ªÉ m·∫Øc l·ªói. H√£y ki·ªÉm tra th√¥ng tin quan tr·ªçng.</p>
          </div>
        </div>
        </div>
      </div>
    </div>
  )
}

export default ChatPage